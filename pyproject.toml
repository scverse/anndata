[build-system]
build-backend = "hatchling.build"
requires = [ "hatchling", "hatch-vcs" ]

[project]
name = "anndata"
description = "Annotated data."
requires-python = ">=3.11"
license = "BSD-3-Clause"
authors = [
    { name = "Philipp Angerer" },
    { name = "Alex Wolf" },
    { name = "Isaac Virshup" },
    { name = "Sergei Rybakov" },
]
maintainers = [
    { name = "Isaac Virshup", email = "ivirshup@gmail.com" },
    { name = "Philipp Angerer", email = "philipp.angerer@helmholtz-munich.de" },
    { name = "Ilan Gold", email = "ilan.gold@helmholtz-munich.de" },
]
readme = "README.md"
classifiers = [
    "Environment :: Console",
    "Framework :: Jupyter",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Visualization",
]
dependencies = [
    # pandas 2.1.0rc0 has pandas/issues/54622
    "pandas >=2.0.0, !=2.1.0rc0, !=2.1.2",
    "numpy>=1.25",
    # https://github.com/scverse/anndata/issues/1434
    "scipy >1.11",
    "h5py>=3.8",
    "natsort",
    "packaging>=24.2",
    # array-api-compat 1.5 has https://github.com/scverse/anndata/issues/1410
    "array_api_compat>1.4,!=1.5",
    "legacy-api-wrap",
    "zarr >=2.18.7, !=3.0.0, !=3.0.1, !=3.0.2, !=3.0.3",
]
dynamic = [ "version" ]

[project.urls]
Documentation = "https://anndata.readthedocs.io/"
Source = "https://github.com/scverse/anndata"
Home-page = "https://github.com/scverse/anndata"


[project.optional-dependencies]
dev = [
    # runtime dev version generation
    "hatch-vcs",
    "anndata[dev-doc,test]",
]
doc = [
    "sphinx>=8.2.1",
    "sphinx-book-theme>=1.1.0",
    "sphinx-autodoc-typehints>=2.2.0",
    "sphinx-issues",
    "sphinx-copybutton",
    "sphinx-toolbox>=3.8.0",
    "sphinxext.opengraph",
    "myst-nb",
    "scanpydoc[theme,typehints] >=0.15.1",
    "awkward>=2.3",
    "IPython",                             # For syntax highlighting in notebooks
    "myst_parser",
    "sphinx_design>=0.5.0",
    "readthedocs-sphinx-search",
    # for unreleased changes
    "anndata[dev-doc,dask]",
    "awkward>=2.3",
]
dev-doc = [ "towncrier>=24.8.0" ] # release notes tool
test-full = [ "anndata[test,lazy]" ]
test = [
    "loompy>=3.0.5",
    "pytest>=8.2,<8.3.4",
    "pytest-cov",
    "pytest-randomly",
    "pytest-memray",
    "pytest-mock",
    "pytest-xdist[psutil]",
    "filelock",
    "matplotlib",
    "scikit-learn",
    "openpyxl",
    "joblib",
    "boltons",
    "scanpy>=1.10",
    "httpx",                # For data downloading
    "dask[distributed]",
    "awkward>=2.3",
    "pyarrow",
    "anndata[dask]",
]
gpu = [ "cupy" ]
cu12 = [ "cupy-cuda12x" ]
cu11 = [ "cupy-cuda11x" ]
# requests and aiohttp needed for zarr remote data
lazy = [ "xarray>=2024.06.0", "aiohttp", "requests", "anndata[dask]" ]
# https://github.com/dask/dask/issues/11290
# https://github.com/dask/dask/issues/11752
dask = [ "dask[array]>=2023.5.1,!=2024.8.*,!=2024.9.*,<2025.2.0" ]

[tool.hatch.version]
source = "vcs"
raw-options.version_scheme = "release-branch-semver"
[tool.hatch.build.targets.wheel]
packages = [ "src/anndata", "src/testing" ]

[tool.coverage.run]
data_file = "test-data/coverage"
source_pkgs = [ "anndata" ]
omit = [ "src/anndata/_version.py", "**/test_*.py" ]
concurrency = [ "multiprocessing" ]
parallel = "true"

[tool.coverage.xml]
output = "test-data/coverage.xml"
[tool.coverage.paths]
source = [ "./src", "**/site-packages" ]

[tool.coverage.report]
exclude_also = [
    "if TYPE_CHECKING:",
]

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "--strict-markers",
    "--doctest-modules",
    "--pyargs",
    "-ptesting.anndata._pytest",
    "--dist=loadgroup",
]
filterwarnings = [
    "ignore::anndata._warnings.OldFormatWarning",
    "ignore::anndata._warnings.ExperimentalFeatureWarning",
]
# When `--strict-warnings` is used, all warnings are treated as errors, except those:
filterwarnings_when_strict = [
    "default::anndata._warnings.ImplicitModificationWarning",
    "default:Transforming to str index:UserWarning",
    "default:(Observation|Variable) names are not unique. To make them unique:UserWarning",
    "default::scipy.sparse.SparseEfficiencyWarning",
    "default::dask.array.core.PerformanceWarning",
    "default:anndata will no longer support zarr v2:DeprecationWarning",
    "default:The codec `vlen-utf8:UserWarning",
    "default:The dtype `StringDType():UserWarning",
    "default:Consolidated metadata is:UserWarning",
]
python_files = "test_*.py"
testpaths = [
    "anndata",                  # docstrings (module name due to --pyargs)
    "./tests",                  # unit tests
    "./ci/scripts",             # CI script tests
    "./docs/concatenation.rst", # further doctests
]
# For some reason this effects how logging is shown when tests are run
xfail_strict = true
markers = [ "gpu: mark test to run on GPU" ]

[tool.ruff]
src = [ "src" ]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
select = [
    "E",   # Error detected by Pycodestyle
    "EM",  # Traceback-friendly error messages
    "F",   # Errors detected by Pyflakes
    "FBT", # Boolean positional arguments
    "W",   # Warning detected by Pycodestyle
    "PLW", # Pylint
    "UP",  # pyupgrade
    "I",   # isort
    "TC",  # manage type checking blocks
    "TID", # Banned imports
    "ICN", # Follow import conventions
    "PTH", # Pathlib instead of os.path
    "PT",  # Pytest conventions
    "PYI", # Typing
]
ignore = [
    # line too long -> we accept long comment lines; formatter gets rid of long code lines
    "E501",
    # Do not assign a lambda expression, use a def -> AnnData allows lambda expression assignments,
    "E731",
    # allow I, O, l as variable names -> I is the identity matrix, i, j, k, l is reasonable indexing notation
    "E741",
    # We use relative imports from parent modules
    "TID252",
    # Shadowing loop variables isn’t a big deal
    "PLW2901",
]
[tool.ruff.lint.per-file-ignores]
# E721 comparing types, but we specifically are checking that we aren't getting subtypes (views)
"tests/test_readwrite.py" = [ "E721" ]
[tool.ruff.lint.isort]
known-first-party = [ "anndata" ]
required-imports = [ "from __future__ import annotations" ]
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"subprocess.call".msg = "Use `subprocess.run([…])` instead"
"subprocess.check_call".msg = "Use `subprocess.run([…], check=True)` instead"
"subprocess.check_output".msg = "Use `subprocess.run([…], check=True, capture_output=True)` instead"
"legacy_api_wrap.legacy_api".msg = "Use anndata.compat.old_positionals instead"
[tool.ruff.lint.flake8-type-checking]
exempt-modules = [  ]
strict = true

[tool.codespell]
skip = ".git,*.pdf,*.svg"
ignore-words-list = "theis,coo,homogenous"

[tool.towncrier]
package = "anndata"
directory = "docs/release-notes"
filename = "docs/release-notes/{version}.md"
single_file = false
package_dir = "src"
issue_format = "{{pr}}`{issue}`"
title_format = "(v{version})=\n### {version} {{small}}`{project_date}`"
fragment.bugfix.name = "Bug fixes"
fragment.doc.name = "Documentation"
fragment.feature.name = "Features"
fragment.misc.name = "Miscellaneous improvements"
fragment.performance.name = "Performance"
fragment.breaking.name = "Breaking changes"
fragment.dev.name = "Development Process"
