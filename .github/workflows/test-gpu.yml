name: AWS GPU

on:
  push:
    branches: [main, "[0-9]+.[0-9]+.x"]
  pull_request:
    types:
      - labeled
      - opened
      - synchronize

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  check:
    name: "Triage: Check if GPU tests are allowed to run"
    if: (!contains(github.event.pull_request.labels.*.name, 'skip-gpu-ci'))
    runs-on: ubuntu-latest
    steps:
      - uses: flying-sheep/check@v1
        with:
          success: ${{ github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'run-gpu-ci') }}

  test:
    name: GPU Tests
    needs: check
    runs-on: "cirun-aws-gpu--${{ github.run_id }}"
    timeout-minutes: 30

    defaults:
      run:
        shell: bash -el {0}

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Nvidia SMI sanity check
        run: nvidia-smi

      - name: Install toml-cli
        run: cargo install toml-cli

      - name: Extract max Python version from classifiers
        id: extract_version
        run: |
          classifiers=$(toml get pyproject.toml project.classifiers | grep -oP 'Python :: \K[0-9.]+')
          max_version=$(echo "$classifiers" | sort -V | tail -1)
          echo "max_python_version=$max_version" >> $GITHUB_ENV

      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.max_python_version }}

      - name: Install UV
        uses: hynek/setup-cached-uv@v2
        with:
          cache-dependency-path: pyproject.toml

      - name: Install AnnData
        run: uv pip install --system -e ".[dev,test,cu12]" llvmlite>=0.43

      - name: Env list
        run: pip list

      - name: Run test
        run: pytest -m gpu --cov --cov-report=xml --cov-context=test

      - uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
