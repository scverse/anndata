trigger:
  - main
  - "*.*.x"

variables:
  PIP_CACHE_DIR: $(Pipeline.Workspace)/.pip
  RUN_COVERAGE: no
  PYTEST_ADDOPTS: --color=yes --junitxml=test-data/test-results.xml
  DEPENDENCIES_VERSION: "latest" # |"pre-release" | "minimum-version"
  TEST_TYPE: "standard" # | "coverage"

jobs:
  - job: PyTest
    pool:
      vmImage: "ubuntu-22.04"
    strategy:
      matrix:
        Python3.12:
          python.version: "3.12"
          RUN_COVERAGE: yes
          TEST_TYPE: "coverage"
        Python3.9:
          python.version: "3.9"
        PreRelease:
          python.version: "3.12"
          DEPENDENCIES_VERSION: "pre-release"
          TEST_TYPE: "strict-warning"
        minimum_versions:
          python.version: "3.9"
          DEPENDENCIES_VERSION: "minimum"
          TEST_TYPE: "coverage"
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "$(python.version)"
        displayName: "Use Python $(python.version)"

      - task: Cache@2
        inputs:
          key: '"python $(python.version)" | "$(Agent.OS)" | pyproject.toml'
          restoreKeys: |
            python | "$(Agent.OS)"
            python
          path: $(PIP_CACHE_DIR)
        displayName: Cache pip packages

      - script: |
          python -m pip install --upgrade pip wheel
          pip install .[dev,test]
        displayName: "Install dependencies"
        condition: eq(variables['DEPENDENCIES_VERSION'], 'latest')

      - script: |
          python -m pip install pip wheel tomli packaging pytest-cov
          pip install `python3 ci/scripts/min-deps.py pyproject.toml --extra dev test`
          pip install --no-deps .
        displayName: "Install minimum dependencies"
        condition: eq(variables['DEPENDENCIES_VERSION'], 'minimum')

      - script: |
          python -m pip install --pre --upgrade pip wheel
          pip install --pre .[dev,test]
        displayName: "Install dependencies release candidates"
        condition: eq(variables['DEPENDENCIES_VERSION'], 'pre-release')

      - script: |
          pip list
        displayName: "Display installed versions"

      - script: |
          pytest
        displayName: "PyTest"
        condition: eq(variables['TEST_TYPE'], 'standard')

      - script: |
          pytest --cov --cov-report=xml --cov-context=test
        displayName: "PyTest (coverage)"
        condition: eq(variables['TEST_TYPE'], 'coverage')

      - script: |
          pytest --strict-warnings
        displayName: "PyTest (treat warnings as errors)"
        condition: eq(variables['TEST_TYPE'], 'strict-warning')

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: "test-data/coverage.xml"
        condition: eq(variables['TEST_TYPE'], 'coverage')

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: "test-data/test-results.xml"
          testResultsFormat: JUnit
          testRunTitle: "Publish test results for Python $(python.version)"

      - script: bash <(curl -s https://codecov.io/bash)
        displayName: "Upload to codecov.io"
        condition: eq(variables['TEST_TYPE'], 'coverage')

  - job: CheckBuild
    pool:
      vmImage: "ubuntu-22.04"
    steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: "3.12"
        displayName: "Use Python 3.12"

      - script: |
          python -m pip install --upgrade pip
          pip install build twine
        displayName: "Install build tools and requirements"

      - script: pip list
        displayName: "Display installed versions"

      - script: |
          python -m build --sdist --wheel .
          twine check dist/*
        displayName: "Build & Twine check"

      - script: |
          pip install dist/*.whl
          python -c 'import anndata; print(anndata.__version__)'
        displayName: "Check runtime version"
